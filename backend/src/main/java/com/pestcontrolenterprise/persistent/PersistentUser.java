package com.pestcontrolenterprise.persistent;

import com.google.common.base.Objects;
import com.pestcontrolenterprise.ApplicationContext;
import com.pestcontrolenterprise.api.InvalidStateException;
import com.pestcontrolenterprise.api.User;
import com.pestcontrolenterprise.api.UserSession;

import javax.persistence.*;
import java.time.Duration;
import java.time.Instant;

import static com.google.common.base.Objects.ToStringHelper;
import static com.pestcontrolenterprise.api.InvalidStateException.inactiveSession;

/**
 * @author myzone
 * @date 4/28/14
 */
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public abstract class PersistentUser extends PersistentObject implements User {

    @Id
    protected final String login;

    @Column
    protected volatile String name;

    @Column
    protected volatile String password;

    @Deprecated
    protected PersistentUser() {
        super();

        login = null;
    }

    public PersistentUser(ApplicationContext applicationContext, String login, String name, String password) {
        super(applicationContext);

        this.login = login;
        this.name = name;
        this.password = password;
    }

    @Override
    public String getLogin() {
        return login;
    }

    @Override
    public String getName() {
        return name;
    }

    protected final void setName(UserSession session, String newName) throws IllegalStateException {
        try (QuiteAutoCloseable lock = writeLock()) {
            if (!session.isStillActive(getApplicationContext().getClock()))
                throw new IllegalStateException();

            this.name = newName;

            update();
        }
    }

    protected final void setPassword(UserSession session, String newPassword) throws IllegalStateException {
        try (QuiteAutoCloseable lock = writeLock()) {
            if (!session.isStillActive(getApplicationContext().getClock()))
                throw new IllegalStateException();

            this.password = newPassword;

            update();
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PersistentUser)) return false;

        PersistentUser that = (PersistentUser) o;

        if (!login.equals(that.login)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return login.hashCode();
    }

    @Override
    public String toString() {
        return toStringHelper().toString();
    }

    protected ToStringHelper toStringHelper() {
        return Objects.toStringHelper(this)
                .add("login", login)
                .add("name", name)
                .add("password", password);
    }

    @Entity
    @Inheritance(strategy = InheritanceType.SINGLE_TABLE)
    @DiscriminatorColumn(length = 100)
    public abstract static class PersistentUserSession extends PersistentObject implements UserSession {

        protected static final Duration DEFAULT_DELAY = Duration.ofHours(1);

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        protected final long id = autoGenerated();

        @ManyToOne(targetEntity = PersistentUser.class, cascade = CascadeType.ALL)
        protected final PersistentUser user;

        @Column
        protected final Instant opened;

        @Column
        protected volatile Instant closed;

        @Deprecated
        protected PersistentUserSession() {
            super();

            user = null;
            opened = null;
        }

        public PersistentUserSession(ApplicationContext applicationContext, PersistentUser user) {
            super(applicationContext);

            this.user = user;

            opened = getApplicationContext().getClock().instant();
            closed = opened.plus(DEFAULT_DELAY);
        }

        @Override
        public User getOwner() {
            return user;
        }

        @Override
        public long getId() {
            return id;
        }

        @Override
        public Instant getOpened() {
            return opened;
        }

        @Override
        public Instant getClosed() {
            try (QuiteAutoCloseable lock = readLock()) {
                return closed;
            }
        }

        @Override
        public void changeName(String newName) throws InvalidStateException {
            try (QuiteAutoCloseable lock = readLock()) {
                ensureAndHoldOpened();

                user.setPassword(this, newName);
            }
        }

        @Override
        public void changePassword(String newPassword) throws InvalidStateException {
            try (QuiteAutoCloseable lock = readLock()) {
                ensureAndHoldOpened();

                user.setPassword(this, newPassword);
            }
        }

        @Override
        public final void close() throws InvalidStateException {
            try (QuiteAutoCloseable lock = writeLock()) {
                Instant now = getApplicationContext().getClock().instant();

                if (!willBeActive(now))
                    throw inactiveSession();

                closed = now;

                update();
            }
        }

        @Override
        public String toString() {
            return toStringHelper().toString();
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof PersistentUserSession)) return false;

            PersistentUserSession that = (PersistentUserSession) o;

            if (!closed.equals(that.closed)) return false;
            if (!opened.equals(that.opened)) return false;
            if (!user.equals(that.user)) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = user.hashCode();
            result = 31 * result + opened.hashCode();
            result = 31 * result + closed.hashCode();
            return result;
        }

        protected ToStringHelper toStringHelper() {
            return Objects.toStringHelper(this)
                    .add("user", user)
                    .add("opened", opened)
                    .add("closed", closed);
        }

        protected final void ensureAndHoldOpened() throws InvalidStateException {
            try (QuiteAutoCloseable lock = writeLock()) {
                Instant now = getApplicationContext().getClock().instant();

                if (!willBeActive(now))
                    throw inactiveSession();

                closed = now.plus(DEFAULT_DELAY);

                update();
            }
        }

    }

}
